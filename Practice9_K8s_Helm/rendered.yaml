---
# Source: nginx/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-nginx
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-20.0.2
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-nginx
      app.kubernetes.io/name: nginx
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: nginx/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-nginx
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-20.0.2
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-nginx
      app.kubernetes.io/name: nginx
---
# Source: nginx/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-nginx
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-20.0.2
automountServiceAccountToken: false
---
# Source: nginx/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-nginx-tls
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-20.0.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURkRENDQWx5Z0F3SUJBZ0lSQUxEOEY2S3NZVHR5eW9HcGkyT3FDOEF3RFFZSktvWklodmNOQVFFTEJRQXcKRXpFUk1BOEdBMVVFQXhNSWJtZHBibmd0WTJFd0hoY05NalV3TlRFNU1UazFOekV5V2hjTk1qWXdOVEU1TVRrMQpOekV5V2pBVE1SRXdEd1lEVlFRREV3aHRlUzF1WjJsdWVEQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFOWVZHY1BsYkNoUGRmV1BaNnhmSmpza3NWa0Q5YnhkNVZnbGtIRU5OVkFqRVhsVW9uWWsKT3c0VGtvV1FCblpDaXQwQ3pwa0dsSE9QQUVTNmUrd094Q2ZQdlEzSGZFVXBsVERxR0FRWkNuU2I3bFZ0RUMwago2RkxUL2dldlVabEx3MytnZkxuZkVFYitRMVVSTWs0YWE0Tk83NUIwbXZTRERmRy8xR2VIbzJlcEtPaDZjVms4CnFoVnJYK1JzcUFVZ3VrU1FvcHMrcE4zUFJlbThVSFY5aFREd3daOWY3ZWZGWHVuaXhKVXR3ZjVsV0Zpa2JrNDQKdDUzVXk0bUVkdURac0RNUURTOTRqMWsyVlEwRmdrQnpXUGpHVnlFZlpHVTk1d0ExT1N3WndUa0ZvaW9Pei9SUQpWcmZoMFp3TEZUNE94RUMxYlhiSGRnYzQwdVFkbENXa0Q4OENBd0VBQWFPQndqQ0J2ekFPQmdOVkhROEJBZjhFCkJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUMKTUFBd0h3WURWUjBqQkJnd0ZvQVU4M1IvN3pBUUUvR1M1QVE0WUdoMFQrYWpCVEV3WHdZRFZSMFJCRmd3Vm9JSQpiWGt0Ym1kcGJuaUNFRzE1TFc1bmFXNTRMbVJsWm1GMWJIU0NGRzE1TFc1bmFXNTRMbVJsWm1GMWJIUXVjM1pqCmdpSnRlUzF1WjJsdWVDNWtaV1poZFd4MExuTjJZeTVqYkhWemRHVnlMbXh2WTJGc01BMEdDU3FHU0liM0RRRUIKQ3dVQUE0SUJBUUJaTnhOMzRMaTdGTndpcG9pQTI1dHJrNmlIcnhDL0pDY0lyNWw3NXFrMlFXR3p4TGp5blg0Wgphci9tN3Flc1F5ekhNNmdCcWIwQWRFeFdlaVQ1WnhhMWJvYWJwbkVoN2RzbUYyenh4MWlkcHJRLzlBNFI1blJnClV4OXdDOFI3a1R4a0Rtbkw0M1BjWmZHL255RW1tS0pKVWJES1JZTnNQd0w4K240Z3NXbk44bU0rVHhhWjNwUkEKWGF2bEZ1ZjVXTlVaNjlGMitMT3FTbVIzZERGMDZueTd0NTJkRkxWNGFJS0dKSkxRanQxZk1LUzFYaTNmSjdudgorZDZUNFN6cWpFUmJydmdmNkJtTzdDcUVMelVnM2Z0b08rQ21JUW80WGRxV3JLZC9ybFd6UWxVcDlveFZBVFBSCmo3S3dLS2FqancwdDEvMjZjNFhjUEQya21NTXBiSmlICi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMWhVWncrVnNLRTkxOVk5bnJGOG1PeVN4V1FQMXZGM2xXQ1dRY1EwMVVDTVJlVlNpCmRpUTdEaE9TaFpBR2RrS0szUUxPbVFhVWM0OEFSTHA3N0E3RUo4KzlEY2Q4UlNtVk1Pb1lCQmtLZEp2dVZXMFEKTFNQb1V0UCtCNjlSbVV2RGY2Qjh1ZDhRUnY1RFZSRXlUaHByZzA3dmtIU2E5SU1OOGIvVVo0ZWpaNmtvNkhweApXVHlxRld0ZjVHeW9CU0M2UkpDaW16NmszYzlGNmJ4UWRYMkZNUERCbjEvdDU4VmU2ZUxFbFMzQi9tVllXS1J1ClRqaTNuZFRMaVlSMjRObXdNeEFOTDNpUFdUWlZEUVdDUUhOWStNWlhJUjlrWlQzbkFEVTVMQm5CT1FXaUtnN1AKOUZCV3QrSFJuQXNWUGc3RVFMVnRkc2QyQnpqUzVCMlVKYVFQendJREFRQUJBb0lCQUZTV204cWFrUVRRZU5SaApLRjZrYmUrNmpOU1dTdmQxeGxQdzY4U3ZxbHdTcnluWXRpU21KaXRtc21OUnlDdmNHUkJBdHE4aU9XLzdsZWlTCklycmdEc09JUXJQNkdYRWVnQk9HdTV5SzVHVzA0eFFmOXQ5UEs5SG1iNTVMdUpzd28zdC9SeWtPS1ZsVHgva0oKeFcyMDVMeEthVUFUd3RKUUlpZGVXNmZZb1Vrb2hSaFZ2eElTbnFDTzl3RVBvZVpmeWdtcEJFREhCQWRhUzhNKwoya0VTdFdtOFJYcjA1SmcxK0RmWlNNRTRnUjIxRXl5bnl4T2VoUlB2U1J2WTJEeWVjNCsvcG5GcFBxTEFPTmpLClEyeXVjSWcrckxMOTVFVFhTODMzYW9nVlZIMTQ5RFJxN0NYcVZETmxPZmxqS0hERzRRMTZTNnNSeVNvSHNvdTEKSU1yRWl4a0NnWUVBMXpqYVNqWEhUay9BS3RBaTNvanFHc0dxcXUvOWtUT3p4YVNDZ1oybjA3N3cxSTZjM2hYUgp0VDhRcE1OQXJqNk5ZMVlOancxeXVQQ05VSDkyUGhPWVo3anJDNUZ2SkdrNW5rSTcyeWlrTGJwbmQ0UmFPclYxCnVQd21LS1I0U3V2SWJlSXN3bG5laWZwNFJLOFpkRG9aRjM5Y3poNC8yRU5LY3J0K1VUUEwvbk1DZ1lFQS9xVDQKVUJ1emI2YTZ1UkZxTzhtNUtpaThtdDdSUE02RHY2VUxwUnJWUTJPYjA4M21FcVdDSUhYT2dvbVR3MUwwMkdtUQpKRzZGTWRBazBkRm1Ia0RKYkNuMDIvWHRWejZTc0pmc09PSXdRZ3RHL1VFUG9kQ2x4NXAycFY2aWIyYzNIaHBHCi9BSDNnZ0Q5UTc0a1VRd3hEV05kblF4enJ3SXMzcVdsQ2pncmxqVUNnWUEwZmJrL3dENEw2NGVDNmFDWGhlMFMKK1lrV2g5SGdTQ3ZnV0c4OERhZVJEVkRQaHJqYnNaYWtEZTJSUWMzVXNZenFYV0tSTVVaNXRMSENvRlBHY0NFTApxeDRvaENBSFVXS3NKcHRTcUdiaWdFUWI4anZQZGRKd2U0OFMrb29jTzhWMmgyTkRRNGZ6UHhOMkxQNllTbE0wClYrdmFtYVlZcU5EUGlzc1VJdjN0NFFLQmdRRGpPSE4yai9GQ1RLVkxKSFlGMlkrSFJnaGRyVHRKcGdFN3pkc2gKUFZ0VklablhtbCtVL2VpcWJGU1VlSXpJZXNxT0hVd0lwakhsN0JRZXdWbjgzdFNjMXFkdWF2aVlvL1lpNjcxVwpXTWEwOS9rbFhKdkZTVGZVYjBrMWNNZEMzdmY0dlh2ZnZTV005TE1KY3E1WFA2aTVpSlBzNGtLTHhFWWplZTFWCnZCOXdqUUtCZ1FDVURpenE0TVBiYzVHRmUvd2VPZldrZzhpcTc5ZFdpRkwxeWYvK1ZrL3grKzI1Wm9pNWtObXkKZjhDRW4yc1ZjaFFVTUlWQzhOZTJkajBvT1pCNzNzSHJBWTdQVE1tb3YvMjJ6bU41NW9MTmRQQjZKMTAxOW8wdgpUd1ZncXZKMEFCeUx5VFlzWG5jaTZkOXNQQkhyTzE1bStDSWQrYWVPOWloQTdYV3Nrdlo1UkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lRT3duT1FoNlUxUlpBYzV6SGtrVm1UakFOQmdrcWhraUc5dzBCQVFzRkFEQVQKTVJFd0R3WURWUVFERXdodVoybHVlQzFqWVRBZUZ3MHlOVEExTVRreE9UVTNNVEZhRncweU5qQTFNVGt4T1RVMwpNVEZhTUJNeEVUQVBCZ05WQkFNVENHNW5hVzU0TFdOaE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXhvL29xckkyOEpYOW1NQTlFVGEySHFuWmZOYnhrcjcvd2lGM1V2Ny9EMUtDcGZjdEMralcKTnZia3kxZEZCNngzK3FEWnN2MlRaME9wM0xvMmZlQkV3bmJuY1R5TVBocWkrSkxjZEhBcVRUUUxUcGNRcWlIMQpyNUpzRFFMNUpHRlFyWVNlaEdLcFRmaTNZc25JK1gyMm9wTkdlWllhRklRZm05YTBLWDRFUEpNOHhNNGYyYW9WCjdTcllVYXZvVVFwTnV1LzJtajB0U2kxMWpocGFaeSttWSt1SUdiWVhOTWNncytwMjNPL3BGekt5dXBoTUVWOFQKWTVBeGplMUxNWlBTV3c3eWM2QWpla1pNOVhuQkpZYW5la0d5elBWWmdKK3FtakdOVHMzU1E5Qzg4OFpwNGQvQgo4M1E3dUJYRUZ0c25iVDdmMWdwL3d6cWROYW1wajdRT0ZRSURBUUFCbzJFd1h6QU9CZ05WSFE4QkFmOEVCQU1DCkFxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0hRWURWUjBPQkJZRUZQTjBmKzh3RUJQeGt1UUVPR0JvZEUvbW93VXhNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBeVYwbUtLeGNqRmxBakVEa3RIeUo2dnFKdHNuZmVqbXRTRmNwTkc1NUY2SVJsQ2N5VzZOZWJaYWVpCllmSzZIOFdXWFZ5czZlL1d3QTNyeno1ZHdjdnlFNGs2Uko2b09CZzZyMnEwYTdhakc1WTIwaW81dmx0SXRWMXcKZmtkamNUSlJtZXk3WFUrbTRqWXdsbmlMa0lsQXo2Y2VDVnBIbkFCVHI0b1FNcEIxQUx3c0oxdUVDaU5sT05kZwpmUHFhMHkrSGZmTnFHNzRQNGhONXF2SnJnUVJCQW9rZmtnT0MyNlhQdG9UekplQ0ZuV0s3U1B0N0tlSmhBc0hTCnc1Q0g2Sk9rR2VXYmxoOHRjRFlUdE1GUFZYVGNSQkNUbytJMHNjbXdyVEI2VkYwTHh0a3d2ZW9aWGhhaTFUd2MKb2pDZnRXNitYUjNMRHRWQWFOSFl3MTl5QTd0TwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: nginx/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-20.0.2
  annotations:
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-nginx
    app.kubernetes.io/name: nginx
---
# Source: nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-20.0.2
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-nginx
      app.kubernetes.io/name: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nginx
        app.kubernetes.io/version: 1.28.0
        helm.sh/chart: nginx-20.0.2
      annotations:
    spec:
      
      shareProcessNamespace: false
      serviceAccountName: my-nginx
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-nginx
                    app.kubernetes.io/name: nginx
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      hostNetwork: false
      hostIPC: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/nginx:1.28.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/nginx/logs; then
                cp -r /opt/bitnami/nginx/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.28.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: NGINX_HTTP_PORT_NUMBER
              value: "8080"
            - name: NGINX_HTTPS_PORT_NUMBER
              value: "8443"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: certificate
              mountPath: /certs
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: certificate
          secret:
            secretName: my-nginx-tls
            items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
